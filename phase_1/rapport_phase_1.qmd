---
title: "Rapport de laboratoire 3"
subtitle: "MTH8408"
author:
  - name: NAMES
    email: EMAILS
    affiliation:
      - name: AFFILIATION
format:
  pdf:
    keep-tex: false
    documentclass: article
    include-in-header:
      - text: |
            \usepackage{xspace}
    geometry:
      - margin=1in
    papersize: letter
    colorlinks: true
    urlcolor: blue
engine: julia
---


```{julia}
#| output: false
using Pkg
Pkg.activate("projet_env")
Pkg.add("ADNLPModels")
Pkg.add("NLPModels")
Pkg.add("Krylov")
Pkg.add("LinearOperators")

Pkg.add("OptimizationProblems")  # collection + outils pour sélectionner les problèmes
# TODO: add CUTest

using LinearAlgebra, NLPModels , ADNLPModels, Printf, Krylov, LinearOperators 

using OptimizationProblems, OptimizationProblems.ADNLPProblems
```


```{julia}

function newton_inexact_trust_region(model, eps_a=1.0e-5, eps_r=1.0e-5, mem=5, max_iter_ratio=10)
    
    xk = model.meta.x0
    n = length(xk)
    fk = obj(model, xk)
    gk = grad(model, xk)
    gnorm = gnorm0 = norm(gk)
    k = 0
    deltak = 1.0
    @printf "%2s  %9s  %7s\n" "k" "fk" "‖grad‖"
    @printf "%2d  %9.2e  %7.1e\n" k fk gnorm
    while gnorm > 1.0e-6 + 1.0e-6 * gnorm0 && k < 10*n
        Hk = hess(model,xk)
        ##############################
        #    Trust region update     #
        ##############################
        (sk, stats) = Krylov.cg(Hk, -gk,radius=deltak)
        ##############################
        #       Trust region         #
        ##############################
        # predicted objective reduction
        red_pred = -dot(gk, sk) - 0.5*(sk'*(Hk*sk))

        f_new = obj(model, xk .+ sk)
        
        # actual obj reduction
        red_act = fk - f_new

        # actual obj reduction to predicted obj red ratio
        rho = red_act / red_pred

        # if reduction is greater than tolerance, accept step size. Otherwise,
        # reject step size
        if rho >= 1e-4
            # update new point
            xk .+= sk
            fk = f_new
            gk .= grad(model, xk)
            gnorm = norm(gk)
        end

        # increase / decrease trust region radius
        if rho >= 0.99
            deltak *= 3
        elseif rho < 1e-4
            deltak /= 3
        end
        ##############################

        k += 1
        @printf "%2d  %9.2e  %7.1e\n" k fk gnorm
    end

    return xk

end

```


```{julia}
#| output: false
meta = OptimizationProblems.meta
problem_list = meta[(meta.ncon.==0).&.!meta.has_bounds.&(meta.nvar.==100), :name]
problems = (OptimizationProblems.ADNLPProblems.eval(Meta.parse(problem))() for problem ∈ problem_list)
```


```{julia}
models = []
push!(models, OptimizationProblems.ADNLPProblems.chainwoo())
# push!(models, OptimizationProblems.ADNLPProblems.errinros_mod())
# push!(models, OptimizationProblems.ADNLPProblems.freuroth())

# Validation of the modified newton method
x_star = newton_inexact_trust_region(models[1])

```